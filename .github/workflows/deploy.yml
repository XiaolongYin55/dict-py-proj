name: Auto Deploy to Ubuntu

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted
    steps:
    - name: Stop Services First
      run: |
        cd /home/laurence/myDict
        echo "⏹️  先停止所有服务避免冲突..."
        docker compose stop web 2>/dev/null || true
        docker compose down 2>/dev/null || true
        echo "✅ 服务已停止"
        
    - name: Pull Latest Code
      run: |
        cd /home/laurence/myDict
        git stash
        git reset --hard HEAD
        git pull origin main
        echo "✅ 代码更新完成"
        
    - name: Clean Environment
      run: |
        cd /home/laurence/myDict
        docker compose down --volumes --remove-orphans 2>/dev/null || true
        docker system prune -f
        echo "✅ 环境清理完成"
        
    - name: Rebuild Services
      run: |
        cd /home/laurence/myDict
        docker compose build --no-cache
        echo "✅ 服务重建完成"
        
    - name: Start Database with Wait
      run: |
        cd /home/laurence/myDict
        docker compose up -d db
        echo "⏳ 等待数据库完全启动（60秒）..."
        sleep 60
        echo "✅ 数据库启动完成"
        
    - name: Verify Database Connection
      run: |
        cd /home/laurence/myDict
        echo "🔍 验证数据库连接..."
        if docker compose exec -T db mysql -uroot -p12345678 -e "SELECT 1;" &>/dev/null; then
          echo "✅ 数据库连接正常"
        else
          echo "❌ 数据库连接失败，查看日志:"
          docker compose logs db
          exit 1
        fi
        
    - name: Run Database Migrations
      run: |
        cd /home/laurence/myDict
        echo "🔧 运行数据库迁移..."
        docker compose run --rm web python manage.py migrate
        echo "✅ 迁移完成"
        
    - name: Start Web Service
      run: |
        cd /home/laurence/myDict
        docker compose up -d web
        echo "✅ Web服务启动完成"
        
    - name: Wait for Application
      run: |
        cd /home/laurence/myDict
        echo "⏳ 等待应用启动（30秒）..."
        sleep 30
        
    - name: Final Health Check
      run: |
        cd /home/laurence/myDict
        echo "🔍 最终健康检查..."
        
        # 检查服务状态
        docker compose ps
        
        # 健康检查
        for i in $(seq 1 6); do
          if curl -f http://localhost:8000/api/users/ &>/dev/null; then
            echo "✅ 应用健康检查通过"
            echo "🎉 自动化部署成功!"
            echo "🌐 访问地址: http://192.168.181.129:8000"
            break
          else
            echo "⏱️  等待应用启动... ($i/6)"
            sleep 5
          fi
        done
        
        # 如果健康检查失败，显示日志
        if ! curl -f http://localhost:8000/api/users/ &>/dev/null; then
          echo "❌ 健康检查失败，查看详细日志:"
          docker compose logs web
          exit 1
        fi
